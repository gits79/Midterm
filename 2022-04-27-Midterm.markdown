# FORD-FULKERSON Algorithm
<br/>

## 개념 및 용어 정리
* 정의 
    * c(u,v): 정점 u에서 v로 가는 간선의 용량
    * f(u,v): 정점 u에서 v로 실제 흐르는 유량

* 유량 네트워크의 속성
    1. 용량 제한 속성 : 유량은 그 간선의 용량을 초과할 수 없다\
     f(u,v) ≤ c(u,v)
    2. 유량의 보존 : 소스와 싱크를 제외한 정점에는 들어오는 유량과 나가는 유량은 같다\
        ∑ v ∈ V  f(u,v) = 0

    3. 유량의 대칭성 : 유량이 u에서 v로 흐르면 음수의 유량이 흐르는 것과 동일\
        f(u,v) = - f(u,v)


#
<br/>


* 주어진 문제

![img](https://velog.velcdn.com/images%2Fgeunwoobaek%2Fpost%2Fe2cf2a36-16bd-4890-9dc9-30660fde6177%2Fimage.png)
<br/>
<br/>

### 알고리즘 과정
1. Source에서 sink로 가는 경로를 하나 찾습니다.(증가 경로)\
0->1->3->5 를 찾았습니다.
2. 찾아낸 경로에 보낼수 있는 최대 flow을 찾습니다.\
c(0,1) - f(0,1) = 16\
c(1,3) - f(1,3) = 12\
c(3,5) - f(3,5) = 20  ,  min(16,12,20) = 12
3. 찾아낸 경로에 보낼수 있는 최대 flow를 보냅니다.\
 2번과정에서 찾은 최대 flow를 적용하고 1~3번을 증가 경로를\
 더이상 찾지 못할때 까지 반복합니다.
 <br/>
 <br/>


 *최종 최대 유량 값
 ![img2](https://velog.velcdn.com/images%2Fgeunwoobaek%2Fpost%2F593f907e-d460-481f-93cb-679d7ca248cb%2Fimage.png)

 증가 경로를 찾을 때 코드는 DFS가 아닌 BFS를 사용하였으며 그 이유는 밑에\
 시간 복잡도에서 설명하겠습니다.
 <br/>
 <br/>
#
<br/><br/>


전체코드
```java 
import java.util.LinkedList;
import java.util.Queue;

public class Ford_Fulkerson {
    static final int MAX = 10;
    static final int INF = Integer.MAX_VALUE/2;
    static int result;
    static int c[][] = new int[MAX][MAX];
    static int f[][] = new int[MAX][MAX];
    static int d[];
    static Queue<Integer> queue;



    static int maxFlow(int soucre,int sink){
        // 큐 방문체크 선언
       queue = new LinkedList<>();
       d = new int[MAX];
        while(true){
            queue.clear();
            // 모든 정점은 방문하지 않은 상태로 초기화
            for(int i=0;i<d.length;i++){
                d[i]=-1;
            }
            // 방문 초기화 및 시작점 큐에 넣기
            d[soucre] = soucre;
            queue.add(soucre);
            // 증가경로 다 찾을때 까지 BFS 적용
            while (!queue.isEmpty() && d[sink]==-1){
                int temp = queue.poll();
                //인접 노드 확인
                for(int next=0;next<MAX;next++){
                    // 용량에서 유량을 빼서 흐를수 있는경우와 방문하지 않은경우
                    if(c[temp][next]-f[temp][next]>0 && d[next]==-1){
                        // 방문했다고 처리하고 경로를 기억하기 위해 인접노드로 가는 값 넣음
                        d[next] = temp;
                        //다음 큐에 넣기
                        queue.add(next);
                    }
                }
            }
            //모든 경로 다 찾은 경우 끝
            if(d[sink]==-1)
                break;

            int flow = INF;

            // 도착지에서 출발점으로 돌아오면서 최소 유량 탐색
            for(int i= sink;i !=soucre; i=d[i]){
                flow = Math.min(flow,c[d[i]][i]-f[d[i]][i]);
            }

            //도착지에서 출발점으로 돌아오면서
            // 최소 유량만큼 추가해나감 음의 경우도 계산산
           for(int i= sink;i !=soucre; i=d[i]){
                f[d[i]][i] += flow;
                f[i][d[i]] -= flow;
            }
            result += flow;

        }


        return result;
    }


    public static void main(String[] args) {

        //0에서 가는 경우
        c[0][1] = 16;
        c[0][2] = 13;
        //0으로 가는 역방향
        c[1][0] = -16;
        c[2][0] = -13;
        //1에서 가는 경우
        c[1][2] = 10;
        c[1][3] = 12;
        //1으로 가는 역방향
        c[2][1] = 4;
        c[3][1] = -12;
        //2에서 가는 경우
        c[2][4] = 14;
        c[2][1] = 4;
        //2로 가는 역방향
        c[4][2] = -14;
        c[1][2] = 10;
        //3에서 가는 경우
        c[3][2] = 9;
        c[3][5] = 20;
        //3으로 가는 역방향
        c[2][3] = -9;
        c[5][3] = -20;
        //4에서 가는 경우
        c[4][3] = 7;
        c[4][5] = 4;
        //4로 가는 역방향
        c[3][4] = -7;
        c[5][4] = -4;

        
        System.out.println("최대 유량은 "+maxFlow(0,5));
    }
}


```
<br/>

**결과 화면**

![img](result.png)

#
<br/>

## ***<span style="color:skyblue">포드 풀커슨 알고리즘의 시간 복잡도</span>***

포드 풀커슨 알고리즘은 DFS를 통한 구현입니다.
![img3](https://mblogthumb-phinf.pstatic.net/MjAxODA2MTNfNjcg/MDAxNTI4ODc5NjQ5ODY3.DTVqJxy43or9FVceZj7OkJ217FqZY1tNRIY2MTfQFP8g.6qfAtiDRAJuxU2lWe_lwbpp-f09pPp7lt1qM-dXDjO8g.PNG.jh20s/image.png?type=w800)

만약 s->1->2->t 경로를 찾아 flow를 흘려보내면 maxflow는 1이됩니다.\
다시 s->2->1->t 경로로 1을 흘려보내면 또 s->1->2->t 흘려보내 \
증가경로 한개당 플로우 1밖에 보낼 수 없습니다.\
그래서 엣지의 수가 더 많을 경우 시간복잡도는 O(Ef) 입니다.  E:간선의 갯수, f : 최대유량\
`시간 복잡도 O(Ef)`


## ***<span style="color:skyblue">에드먼드 카프 알고리즘의 시간 복잡도</span>***

시간 복잡도를 낮추기 위해 DFS를 BFS로 변경한 것이 바로 에드먼트 카프 알고리즘입니다.\
애드몬드 카프 알고리즘의 시간복잡도는 정확하게는 min(O(Ef), O(VE^2))입니다.\
 간선은 복잡한 그래프지만 흘려야하는 유량(f)이 적으면 O(Ef) < O(VE^2) 가 될 수 있기 때문입니다.\
`시간 복잡도 min(O(Ef),O(VE^2))`

